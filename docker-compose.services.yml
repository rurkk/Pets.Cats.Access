services:
  postgres:
    container_name: postgres
    image: postgres:14.5
    hostname: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=catapi_password
      - POSTGRES_USER=catapi_user
      - POSTGRES_DB=cats_db

  zookeeper:
    image: bitnami/zookeeper:3.7.2
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: bitnami/kafka:3.0
    restart: unless-stopped
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"     # INSIDE listener
      - "9093:9093"     # OUTSIDE listener
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      ALLOW_PLAINTEXT_LISTENER: "yes"

  init-topics:
    image: bitnami/kafka:3.0
    command: >
      sh -c  "kafka-topics.sh --create --topic pets.cats.data.create-cat --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092 && \
              kafka-topics.sh --create --topic pets.owners.data.create-owner --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092 && \
              kafka-topics.sh --create --topic pets.cats.data.get-cat --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:9092"
    depends_on:
      kafka:
        condition: service_started

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.1
    restart: unless-stopped
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092